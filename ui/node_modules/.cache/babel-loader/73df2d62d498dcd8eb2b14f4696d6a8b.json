{"ast":null,"code":"import _defineProperty from \"/Users/pabloestrada/Desktop/PersonalWebsite/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// tslint:disable\n\n/**\n * PersonalWebsite\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nexport const BASE_PATH = \"http://localhost:8080\".replace(/\\/+$/, \"\");\n\nconst isBlob = value => typeof Blob !== 'undefined' && value instanceof Blob;\n/**\n * This is the base class for all generated API classes.\n */\n\n\nexport class BaseAPI {\n  constructor(configuration = new Configuration()) {\n    this.configuration = configuration;\n    this.middleware = void 0;\n\n    this.fetchApi = async (url, init) => {\n      let fetchParams = {\n        url,\n        init\n      };\n\n      for (const middleware of this.middleware) {\n        if (middleware.pre) {\n          fetchParams = (await middleware.pre(_objectSpread({\n            fetch: this.fetchApi\n          }, fetchParams))) || fetchParams;\n        }\n      }\n\n      let response = await this.configuration.fetchApi(fetchParams.url, fetchParams.init);\n\n      for (const middleware of this.middleware) {\n        if (middleware.post) {\n          response = (await middleware.post({\n            fetch: this.fetchApi,\n            url,\n            init,\n            response: response.clone()\n          })) || response;\n        }\n      }\n\n      return response;\n    };\n\n    this.middleware = configuration.middleware;\n  }\n\n  withMiddleware(...middlewares) {\n    const next = this.clone();\n    next.middleware = next.middleware.concat(...middlewares);\n    return next;\n  }\n\n  withPreMiddleware(...preMiddlewares) {\n    const middlewares = preMiddlewares.map(pre => ({\n      pre\n    }));\n    return this.withMiddleware(...middlewares);\n  }\n\n  withPostMiddleware(...postMiddlewares) {\n    const middlewares = postMiddlewares.map(post => ({\n      post\n    }));\n    return this.withMiddleware(...middlewares);\n  }\n\n  async request(context) {\n    const _this$createFetchPara = this.createFetchParams(context),\n          url = _this$createFetchPara.url,\n          init = _this$createFetchPara.init;\n\n    const response = await this.fetchApi(url, init);\n\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    }\n\n    throw response;\n  }\n\n  createFetchParams(context) {\n    let url = this.configuration.basePath + context.path;\n\n    if (context.query !== undefined && Object.keys(context.query).length !== 0) {\n      // only add the querystring to the URL if there are query parameters.\n      // this is done to avoid urls ending with a \"?\" character which buggy webservers\n      // do not handle correctly sometimes.\n      url += '?' + this.configuration.queryParamsStringify(context.query);\n    }\n\n    const body = context.body instanceof FormData || isBlob(context.body) ? context.body : JSON.stringify(context.body);\n    const headers = Object.assign({}, this.configuration.headers, context.headers);\n    const init = {\n      method: context.method,\n      headers: headers,\n      body,\n      credentials: this.configuration.credentials\n    };\n    return {\n      url,\n      init\n    };\n  }\n\n  /**\n   * Create a shallow clone of `this` by constructing a new instance\n   * and then shallow cloning data members.\n   */\n  clone() {\n    const constructor = this.constructor;\n    const next = new constructor(this.configuration);\n    next.middleware = this.middleware.slice();\n    return next;\n  }\n\n}\n;\nexport class RequiredError extends Error {\n  constructor(field, msg) {\n    super(msg);\n    this.field = field;\n    this.name = \"RequiredError\";\n  }\n\n}\nexport const COLLECTION_FORMATS = {\n  csv: \",\",\n  ssv: \" \",\n  tsv: \"\\t\",\n  pipes: \"|\"\n};\nexport class Configuration {\n  constructor(configuration = {}) {\n    this.configuration = configuration;\n  }\n\n  get basePath() {\n    return this.configuration.basePath || BASE_PATH;\n  }\n\n  get fetchApi() {\n    return this.configuration.fetchApi || window.fetch.bind(window);\n  }\n\n  get middleware() {\n    return this.configuration.middleware || [];\n  }\n\n  get queryParamsStringify() {\n    return this.configuration.queryParamsStringify || querystring;\n  }\n\n  get username() {\n    return this.configuration.username;\n  }\n\n  get password() {\n    return this.configuration.password;\n  }\n\n  get apiKey() {\n    const apiKey = this.configuration.apiKey;\n\n    if (apiKey) {\n      return typeof apiKey === 'function' ? apiKey : () => apiKey;\n    }\n\n    return undefined;\n  }\n\n  get accessToken() {\n    const accessToken = this.configuration.accessToken;\n\n    if (accessToken) {\n      return typeof accessToken === 'function' ? accessToken : () => accessToken;\n    }\n\n    return undefined;\n  }\n\n  get headers() {\n    return this.configuration.headers;\n    ;\n  }\n\n  get credentials() {\n    return this.configuration.credentials;\n    ;\n  }\n\n}\nexport function exists(json, key) {\n  const value = json[key];\n  return value !== null && value !== undefined;\n}\nexport function querystring(params, prefix = '') {\n  return Object.keys(params).map(key => {\n    const fullKey = prefix + (prefix.length ? \"[\".concat(key, \"]\") : key);\n    const value = params[key];\n\n    if (value instanceof Array) {\n      const multiValue = value.map(singleValue => encodeURIComponent(String(singleValue))).join(\"&\".concat(encodeURIComponent(fullKey), \"=\"));\n      return \"\".concat(encodeURIComponent(fullKey), \"=\").concat(multiValue);\n    }\n\n    if (value instanceof Object) {\n      return querystring(value, fullKey);\n    }\n\n    return \"\".concat(encodeURIComponent(fullKey), \"=\").concat(encodeURIComponent(String(value)));\n  }).filter(part => part.length > 0).join('&');\n}\nexport function mapValues(data, fn) {\n  return Object.keys(data).reduce((acc, key) => _objectSpread({}, acc, {\n    [key]: fn(data[key])\n  }), {});\n}\nexport class JSONApiResponse {\n  constructor(raw, transformer = jsonValue => jsonValue) {\n    this.raw = raw;\n    this.transformer = transformer;\n  }\n\n  async value() {\n    return this.transformer((await this.raw.json()));\n  }\n\n}\nexport class VoidApiResponse {\n  constructor(raw) {\n    this.raw = raw;\n  }\n\n  async value() {\n    return undefined;\n  }\n\n}\nexport class BlobApiResponse {\n  constructor(raw) {\n    this.raw = raw;\n  }\n\n  async value() {\n    return await this.raw.blob();\n  }\n\n}\nexport class TextApiResponse {\n  constructor(raw) {\n    this.raw = raw;\n  }\n\n  async value() {\n    return await this.raw.text();\n  }\n\n}","map":{"version":3,"sources":["/Users/pabloestrada/Desktop/PersonalWebsite/ui/src/api/runtime.ts"],"names":["BASE_PATH","replace","isBlob","value","Blob","BaseAPI","constructor","configuration","Configuration","middleware","fetchApi","url","init","fetchParams","pre","fetch","response","post","clone","withMiddleware","middlewares","next","concat","withPreMiddleware","preMiddlewares","map","withPostMiddleware","postMiddlewares","request","context","createFetchParams","status","basePath","path","query","undefined","Object","keys","length","queryParamsStringify","body","FormData","JSON","stringify","headers","assign","method","credentials","slice","RequiredError","Error","field","msg","name","COLLECTION_FORMATS","csv","ssv","tsv","pipes","window","bind","querystring","username","password","apiKey","accessToken","exists","json","key","params","prefix","fullKey","Array","multiValue","singleValue","encodeURIComponent","String","join","filter","part","mapValues","data","fn","reduce","acc","JSONApiResponse","raw","transformer","jsonValue","VoidApiResponse","BlobApiResponse","blob","TextApiResponse","text"],"mappings":"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","sourcesContent":["// tslint:disable\n/**\n * PersonalWebsite\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\ndeclare type GlobalFetch = WindowOrWorkerGlobalScope\nexport const BASE_PATH = \"http://localhost:8080\".replace(/\\/+$/, \"\");\n\nconst isBlob = (value: any) => typeof Blob !== 'undefined' && value instanceof Blob;\n\n/**\n * This is the base class for all generated API classes.\n */\nexport class BaseAPI {\n\n    private middleware: Middleware[];\n\n    constructor(protected configuration = new Configuration()) {\n        this.middleware = configuration.middleware;\n    }\n\n    withMiddleware<T extends BaseAPI>(this: T, ...middlewares: Middleware[]) {\n        const next = this.clone<T>();\n        next.middleware = next.middleware.concat(...middlewares);\n        return next;\n    }\n\n    withPreMiddleware<T extends BaseAPI>(this: T, ...preMiddlewares: Array<Middleware['pre']>) {\n        const middlewares = preMiddlewares.map((pre) => ({ pre }));\n        return this.withMiddleware<T>(...middlewares);\n    }\n\n    withPostMiddleware<T extends BaseAPI>(this: T, ...postMiddlewares: Array<Middleware['post']>) {\n        const middlewares = postMiddlewares.map((post) => ({ post }));\n        return this.withMiddleware<T>(...middlewares);\n    }\n\n    protected async request(context: RequestOpts): Promise<Response> {\n        const { url, init } = this.createFetchParams(context);\n        const response = await this.fetchApi(url, init);\n        if (response.status >= 200 && response.status < 300) {\n            return response;\n        }\n        throw response;\n    }\n\n    private createFetchParams(context: RequestOpts) {\n        let url = this.configuration.basePath + context.path;\n        if (context.query !== undefined && Object.keys(context.query).length !== 0) {\n            // only add the querystring to the URL if there are query parameters.\n            // this is done to avoid urls ending with a \"?\" character which buggy webservers\n            // do not handle correctly sometimes.\n            url += '?' + this.configuration.queryParamsStringify(context.query);\n        }\n        const body = (context.body instanceof FormData || isBlob(context.body))\n\t    ? context.body\n\t    : JSON.stringify(context.body);\n\n        const headers = Object.assign({}, this.configuration.headers, context.headers);\n        const init = {\n            method: context.method,\n            headers: headers,\n            body,\n            credentials: this.configuration.credentials\n        };\n        return { url, init };\n    }\n\n    private fetchApi = async (url: string, init: RequestInit) => {\n        let fetchParams = { url, init };\n        for (const middleware of this.middleware) {\n            if (middleware.pre) {\n                fetchParams = await middleware.pre({\n                    fetch: this.fetchApi,\n                    ...fetchParams,\n                }) || fetchParams;\n            }\n        }\n        let response = await this.configuration.fetchApi(fetchParams.url, fetchParams.init);\n        for (const middleware of this.middleware) {\n            if (middleware.post) {\n                response = await middleware.post({\n                    fetch: this.fetchApi,\n                    url,\n                    init,\n                    response: response.clone(),\n                }) || response;\n            }\n        }\n        return response;\n    }\n\n    /**\n     * Create a shallow clone of `this` by constructing a new instance\n     * and then shallow cloning data members.\n     */\n    private clone<T extends BaseAPI>(this: T): T {\n        const constructor = this.constructor as any;\n        const next = new constructor(this.configuration);\n        next.middleware = this.middleware.slice();\n        return next;\n    }\n};\n\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\nexport type FetchAPI = GlobalFetch['fetch'];\n\nexport interface ConfigurationParameters {\n    basePath?: string; // override base path\n    fetchApi?: FetchAPI; // override for fetch implementation\n    middleware?: Middleware[]; // middleware to apply before/after fetch requests\n    queryParamsStringify?: (params: HTTPQuery) => string; // stringify function for query strings\n    username?: string; // parameter for basic security\n    password?: string; // parameter for basic security\n    apiKey?: string | ((name: string) => string); // parameter for apiKey security\n    accessToken?: string | ((name?: string, scopes?: string[]) => string); // parameter for oauth2 security\n    headers?: HTTPHeaders; //header params we want to use on every request\n    credentials?: RequestCredentials; //value for the credentials param we want to use on each request\n}\n\nexport class Configuration {\n    constructor(private configuration: ConfigurationParameters = {}) {}\n\n    get basePath(): string {\n        return this.configuration.basePath || BASE_PATH;\n    }\n\n    get fetchApi(): FetchAPI {\n        return this.configuration.fetchApi || window.fetch.bind(window);\n    }\n\n    get middleware(): Middleware[] {\n        return this.configuration.middleware || [];\n    }\n\n    get queryParamsStringify(): (params: HTTPQuery) => string {\n        return this.configuration.queryParamsStringify || querystring;\n    }\n\n    get username(): string | undefined {\n        return this.configuration.username;\n    }\n\n    get password(): string | undefined {\n        return this.configuration.password;\n    }\n\n    get apiKey(): ((name: string) => string) | undefined {\n        const apiKey = this.configuration.apiKey;\n        if (apiKey) {\n            return typeof apiKey === 'function' ? apiKey : () => apiKey;\n        }\n        return undefined;\n    }\n\n    get accessToken(): ((name: string, scopes?: string[]) => string) | undefined {\n        const accessToken = this.configuration.accessToken;\n        if (accessToken) {\n            return typeof accessToken === 'function' ? accessToken : () => accessToken;\n        }\n        return undefined;\n    }\n\n    get headers():  HTTPHeaders {\n        return this.configuration.headers as HTTPHeaders;;\n    }\n\n    get credentials(): RequestCredentials {\n        return this.configuration.credentials as RequestCredentials;;\n    }\n}\n\nexport type Json = any;\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS';\nexport type HTTPHeaders = { [key: string]: string };\nexport type HTTPQuery = { [key: string]: string | number | null | boolean | Array<string | number | null | boolean> | HTTPQuery };\nexport type HTTPBody = Json | FormData;\nexport type ModelPropertyNaming = 'camelCase' | 'snake_case' | 'PascalCase' | 'original';\n\nexport interface FetchParams {\n    url: string;\n    init: RequestInit;\n}\n\nexport interface RequestOpts {\n    path: string;\n    method: HTTPMethod;\n    headers: HTTPHeaders;\n    query?: HTTPQuery;\n    body?: HTTPBody;\n}\n\nexport function exists(json: any, key: string) {\n    const value = json[key];\n    return value !== null && value !== undefined;\n}\n\nexport function querystring(params: HTTPQuery, prefix: string = ''): string {\n    return Object.keys(params)\n        .map((key) => {\n            const fullKey = prefix + (prefix.length ? `[${key}]` : key);\n            const value = params[key];\n            if (value instanceof Array) {\n                const multiValue = value.map(singleValue => encodeURIComponent(String(singleValue)))\n                    .join(`&${encodeURIComponent(fullKey)}=`);\n                return `${encodeURIComponent(fullKey)}=${multiValue}`;\n            }\n            if (value instanceof Object) {\n                return querystring(value as HTTPQuery, fullKey);\n            }\n            return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;\n        })\n        .filter(part => part.length > 0)\n        .join('&');\n}\n\nexport function mapValues(data: any, fn: (item: any) => any) {\n  return Object.keys(data).reduce(\n    (acc, key) => ({ ...acc, [key]: fn(data[key]) }),\n    {}\n  );\n}\n\nexport interface RequestContext {\n    fetch: FetchAPI;\n    url: string;\n    init: RequestInit;\n}\n\nexport interface ResponseContext {\n    fetch: FetchAPI;\n    url: string;\n    init: RequestInit;\n    response: Response;\n}\n\nexport interface Middleware {\n    pre?(context: RequestContext): Promise<FetchParams | void>;\n    post?(context: ResponseContext): Promise<Response | void>;\n}\n\nexport interface ApiResponse<T> {\n    raw: Response;\n    value(): Promise<T>;\n}\n\nexport interface ResponseTransformer<T> {\n    (json: any): T;\n}\n\nexport class JSONApiResponse<T> {\n    constructor(public raw: Response, private transformer: ResponseTransformer<T> = (jsonValue: any) => jsonValue) {}\n\n    async value() {\n        return this.transformer(await this.raw.json());\n    }\n}\n\nexport class VoidApiResponse {\n    constructor(public raw: Response) {}\n\n    async value() {\n        return undefined;\n    }\n}\n\nexport class BlobApiResponse {\n    constructor(public raw: Response) {}\n\n    async value() {\n        return await this.raw.blob();\n    };\n}\n\nexport class TextApiResponse {\n    constructor(public raw: Response) {}\n\n    async value() {\n        return await this.raw.text();\n    };\n}\n"]},"metadata":{},"sourceType":"module"}