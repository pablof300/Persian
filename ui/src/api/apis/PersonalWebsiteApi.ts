/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FullWebsiteInfo,
    FullWebsiteInfoFromJSON,
    FullWebsiteInfoToJSON,
} from '../models';

export interface AddProjectInfoRequest {
    name?: string;
    type?: string;
    description?: string;
    funFact?: string;
    url?: string;
    imagePath?: string;
    year?: number;
}

export interface UpdateBaseWebsiteInfoRequest {
    firstParagraphOfAboutMe?: string;
    secondParagraphOfAboutMe?: string;
    listOfTechnicalLanguages?: string;
    listOfFrameworks?: string;
    listOfTools?: string;
    listOfLanguages?: string;
    resumePath?: string;
}

export interface UpdateProjectInfoRequest {
    name?: string;
    type?: string;
    description?: string;
    funFact?: string;
    url?: string;
    imagePath?: string;
    year?: number;
    id?: string;
}

/**
 * no description
 */
export class PersonalWebsiteApi extends runtime.BaseAPI {

    /**
     * Add a new project and get its id
     */
    async addProjectInfoRaw(requestParameters: AddProjectInfoRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.funFact !== undefined) {
            queryParameters['funFact'] = requestParameters.funFact;
        }

        if (requestParameters.url !== undefined) {
            queryParameters['url'] = requestParameters.url;
        }

        if (requestParameters.imagePath !== undefined) {
            queryParameters['imagePath'] = requestParameters.imagePath;
        }

        if (requestParameters.year !== undefined) {
            queryParameters['year'] = requestParameters.year;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/personal-website/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Add a new project and get its id
     */
    async addProjectInfo(requestParameters: AddProjectInfoRequest): Promise<string> {
        const response = await this.addProjectInfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get full website info using the model FullWebsiteInfo
     */
    async getWebsiteInfoRaw(): Promise<runtime.ApiResponse<FullWebsiteInfo>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/personal-website/website`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FullWebsiteInfoFromJSON(jsonValue));
    }

    /**
     * Get full website info using the model FullWebsiteInfo
     */
    async getWebsiteInfo(): Promise<FullWebsiteInfo> {
        const response = await this.getWebsiteInfoRaw();
        return await response.value();
    }

    /**
     * Update base website info
     */
    async updateBaseWebsiteInfoRaw(requestParameters: UpdateBaseWebsiteInfoRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.firstParagraphOfAboutMe !== undefined) {
            queryParameters['firstParagraphOfAboutMe'] = requestParameters.firstParagraphOfAboutMe;
        }

        if (requestParameters.secondParagraphOfAboutMe !== undefined) {
            queryParameters['secondParagraphOfAboutMe'] = requestParameters.secondParagraphOfAboutMe;
        }

        if (requestParameters.listOfTechnicalLanguages !== undefined) {
            queryParameters['listOfTechnicalLanguages'] = requestParameters.listOfTechnicalLanguages;
        }

        if (requestParameters.listOfFrameworks !== undefined) {
            queryParameters['listOfFrameworks'] = requestParameters.listOfFrameworks;
        }

        if (requestParameters.listOfTools !== undefined) {
            queryParameters['listOfTools'] = requestParameters.listOfTools;
        }

        if (requestParameters.listOfLanguages !== undefined) {
            queryParameters['listOfLanguages'] = requestParameters.listOfLanguages;
        }

        if (requestParameters.resumePath !== undefined) {
            queryParameters['resumePath'] = requestParameters.resumePath;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/personal-website/base-website`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update base website info
     */
    async updateBaseWebsiteInfo(requestParameters: UpdateBaseWebsiteInfoRequest): Promise<void> {
        await this.updateBaseWebsiteInfoRaw(requestParameters);
    }

    /**
     * Get website info using the model WebsiteInfo
     */
    async updateProjectInfoRaw(requestParameters: UpdateProjectInfoRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.funFact !== undefined) {
            queryParameters['funFact'] = requestParameters.funFact;
        }

        if (requestParameters.url !== undefined) {
            queryParameters['url'] = requestParameters.url;
        }

        if (requestParameters.imagePath !== undefined) {
            queryParameters['imagePath'] = requestParameters.imagePath;
        }

        if (requestParameters.year !== undefined) {
            queryParameters['year'] = requestParameters.year;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/personal-website/projects`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get website info using the model WebsiteInfo
     */
    async updateProjectInfo(requestParameters: UpdateProjectInfoRequest): Promise<void> {
        await this.updateProjectInfoRaw(requestParameters);
    }

}
